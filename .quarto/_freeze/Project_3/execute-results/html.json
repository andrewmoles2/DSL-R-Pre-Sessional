{
  "hash": "c9a43bb9cd6098a642be0599ab1d9cf9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Project 3 - Weather Application Continued\"\nformat: \n  html:\n    self-contained: true\n    toc: true\n    toc-depth: 4\n    toc-location: right-body\nauthor:\n   - name: Andrew Moles\n     affiliation: Learning Developer, Digital Skills Lab\ndate: today    \n\n---\n\n## Learning objectives:\n- Create vectors\n- Use calculations on vectors\n- Extract elements from vectors\n- Using boolean indexing on vectors\n- Print out hourly weather reports using iteration\n\n\n## Outcomes\n\nWe will continue to write a program that tells us various metrics on what the weather is doing. Your code will automate the process of taking data and making it into a presentable format. \n\nWe will be aiming for two outcomes in this project.\n\n### Outcome 1 - Make a hourly weather report: {#sec-outcomeone}\n\nYou should end up with a output that iterates through each element of your temperatures and times data. Each line should be an hour with the temperature in Celsius and Fahrenheit (in brackets). \n\nIt should also print out what the date at the top of your report. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hourly temperatures on: 30/06/2025\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Temperature at 01: 20.8°C (69.44°F)\"\n[1] \"Temperature at 02: 19.6°C (67.28°F)\"\n[1] \"Temperature at 03: 18.7°C (65.66°F)\"\n[1] \"Temperature at 04: 17.8°C (64.04°F)\"\n[1] \"Temperature at 05: 17.7°C (63.86°F)\"\n[1] \"Temperature at 06: 19.1°C (66.38°F)\"\n[1] \"Temperature at 07: 21.4°C (70.52°F)\"\n[1] \"Temperature at 08: 22.8°C (73.04°F)\"\n[1] \"Temperature at 09: 24.1°C (75.38°F)\"\n[1] \"Temperature at 10: 26.5°C (79.7°F)\"\n[1] \"Temperature at 11: 27.8°C (82.04°F)\"\n[1] \"Temperature at 12: 29.4°C (84.92°F)\"\n[1] \"Temperature at 13: 30.7°C (87.26°F)\"\n[1] \"Temperature at 14: 31.8°C (89.24°F)\"\n[1] \"Temperature at 15: 32.4°C (90.32°F)\"\n[1] \"Temperature at 16: 32°C (89.6°F)\"\n[1] \"Temperature at 17: 31.8°C (89.24°F)\"\n[1] \"Temperature at 18: 31.5°C (88.7°F)\"\n[1] \"Temperature at 19: 31.2°C (88.16°F)\"\n[1] \"Temperature at 20: 29.9°C (85.82°F)\"\n[1] \"Temperature at 21: 28.3°C (82.94°F)\"\n[1] \"Temperature at 22: 27.1°C (80.78°F)\"\n[1] \"Temperature at 23: 26.2°C (79.16°F)\"\n```\n\n\n:::\n:::\n\n\n\n### Outcome 2 - Finding hours with high temperatures {#sec-outcometwo}\n\nWe can filter our temperature vector, which we can add names to, which tells us which hours had temperatures over 30°C. \n\nYou should end up with an output, like below, that has the hour information and the temperature information in one vector. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  13   14   15   16   17   18   19 \n30.7 31.8 32.4 32.0 31.8 31.5 31.2 \n```\n\n\n:::\n:::\n\n\n\n### The data\n\nUsing the data below we will be making a weather reporting tool for a hourly report.\n\n**Hourly temperatures:**\n\n`20.8, 19.6, 18.7, 17.8, 17.7, 19.1, 21.4, 22.8, 24.1, 26.5, 27.8, 29.4, 30.7, 31.8, 32.4, 32.0, 31.8, 31.5, 31.2, 29.9, 28.3, 27.1, 26.2`\n\n**Date and times:**\n\n`\"30/06/2025 01:00:00\", \"30/06/2025 02:00:00\", \"30/06/2025 03:00:00\", \"30/06/2025 04:00:00\", \"30/06/2025 05:00:00\", \"30/06/2025 06:00:00\", \"30/06/2025 07:00:00\", \"30/06/2025 08:00:00\", \"30/06/2025 09:00:00\", \"30/06/2025 10:00:00\", \"30/06/2025 11:00:00\", \"30/06/2025 12:00:00\",\"30/06/2025 13:00:00\", \"30/06/2025 14:00:00\", \"30/06/2025 15:00:00\", \"30/06/2025 16:00:00\", \"30/06/2025 17:00:00\", \"30/06/2025 18:00:00\",\"30/06/2025 19:00:00\", \"30/06/2025 20:00:00\", \"30/06/2025 21:00:00\", \"30/06/2025 22:00:00\", \"30/06/2025 23:00:00\"`\n\n\n## Steps to help you get to the outcome\n\n### Part 1 - the setup\nOpen an R script file and save it.\n\n### Part 2 - using vectors\nUsing the data shown above, store the hourly temperatures and date and times data into R as vectors.\n\n### Part 3 - string manipulation\nExtract part of the string, known as *substrings*, from the date and time data to give you just the date element. Store the result as a variable, keeping just the first element; you should get the result below. \n\n30/06/2025\n\nWe want to do this programmatically, so no copy and pasting from the data, also known as \"hardcoding\". This will help us to automate our code if we want to use different data. \n\n### Part 4 - more string manipulation\nExtract part of the string from the date and time data to give you just the hour elements. Store this as a new vector. \n\n### Part 5 - convert temperatures\nConvert the hourly temperatures data to Fahrenheit and store the result as a new vector.\n\n### Part 6 - start making the text output\nOur ultimate task is to iterate through our temperature and date data to print out a message telling us the temperature for each hour. To get there it is sometimes helpful to breakdown the process. \n\nTry first to a make an output for just the first hour, like the result below, using vector indexing to get the data you need. Then use string concatenation to bring all the information together to create a text output. \n\nTemperature at 01: 20.8°C (69.44°F)\n\n\n### Task 7 - finish the text output\nNow using the code you just wrote, iterate your code so you get the hourly weather report with both Celsius and Fahrenheit, as seen in @sec-outcomeone. \n\n### Task 8 - naming a vector\n\nUsing vector naming, add the hours vector as a name to the temperature vector.\n\n### Part 9 - filtering the temperature vector\n\nUsing boolean indexing, filter the temperature vector so we are only left with temperatures over 30°C. Your outcome should be the same as seen in @sec-outcometwo. \n\n### Part 10 - test your code with new data\nA good way to test out your code is to try it on different data. \n\nBelow we have the temperature data for a few days after the data we have been using. Using the steps you did previously, write a weather report using this new data. \n\n**Hourly temperatures:**\n\n`16.5, 15.5, 14.3, 13.7, 12.4, 12, 12.6, 14.1, 16, 18.2, 19.7, 21.1, 21.8, 22.6, 23.4, 24.3, 23.3, 23.6, 23.1, 23.4, 23.4, 21.6, 20.7, 19.5`\n\n**Date and times:**\n\n`\"03/07/2025 00:00:00\", \"03/07/2025 01:00:00\", \"03/07/2025 02:00:00\", \"03/07/2025 03:00:00\", \"03/07/2025 04:00:00\", \"03/07/2025 05:00:00\", \"03/07/2025 06:00:00\", \"03/07/2025 07:00:00\", \"03/07/2025 08:00:00\", \"03/07/2025 09:00:00\", \"03/07/2025 10:00:00\", \"03/07/2025 11:00:00\", \"03/07/2025 12:00:00\", \"03/07/2025 13:00:00\", \"03/07/2025 14:00:00\", \"03/07/2025 15:00:00\", \"03/07/2025 16:00:00\", \"03/07/2025 17:00:00\", \"03/07/2025 18:00:00\", \"03/07/2025 19:00:00\", \"03/07/2025 20:00:00\", \"03/07/2025 21:00:00\", \"03/07/2025 22:00:00\", \"03/07/2025 23:00:00\"`\n\n### Final task - fill out the survey!\n\n\nWe are always looking to improve and iterate our workshops. [Follow the link to give your feedback](https://lse.eu.qualtrics.com/jfe/form/SV_79QvS52ZX3evC4K?coursename=R Projects 3: Building a Weather Application Continued&topic=R&prog=DS&version=25-26){target=\"_blank\"}.\n\n\n <!--\n### Optional outcome\n\nCan you also get the result to be a vector?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hourly temperatures on: 30/06/2025\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Temperature at 01: 20.8°C (69.44°F)\" \"Temperature at 02: 19.6°C (67.28°F)\"\n [3] \"Temperature at 03: 18.7°C (65.66°F)\" \"Temperature at 04: 17.8°C (64.04°F)\"\n [5] \"Temperature at 05: 17.7°C (63.86°F)\" \"Temperature at 06: 19.1°C (66.38°F)\"\n [7] \"Temperature at 07: 21.4°C (70.52°F)\" \"Temperature at 08: 22.8°C (73.04°F)\"\n [9] \"Temperature at 09: 24.1°C (75.38°F)\" \"Temperature at 10: 26.5°C (79.7°F)\" \n[11] \"Temperature at 11: 27.8°C (82.04°F)\" \"Temperature at 12: 29.4°C (84.92°F)\"\n[13] \"Temperature at 13: 30.7°C (87.26°F)\" \"Temperature at 14: 31.8°C (89.24°F)\"\n[15] \"Temperature at 15: 32.4°C (90.32°F)\" \"Temperature at 16: 32°C (89.6°F)\"   \n[17] \"Temperature at 17: 31.8°C (89.24°F)\" \"Temperature at 18: 31.5°C (88.7°F)\" \n[19] \"Temperature at 19: 31.2°C (88.16°F)\" \"Temperature at 20: 29.9°C (85.82°F)\"\n[21] \"Temperature at 21: 28.3°C (82.94°F)\" \"Temperature at 22: 27.1°C (80.78°F)\"\n[23] \"Temperature at 23: 26.2°C (79.16°F)\"\n```\n\n\n:::\n:::\n\n\n--->\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}