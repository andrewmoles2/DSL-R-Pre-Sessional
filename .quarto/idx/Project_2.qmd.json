{"title":"Project 2 - Weather application","markdown":{"yaml":{"title":"Project 2 - Weather application","format":{"html":{"self-contained":true,"toc":true,"toc-depth":4,"toc-location":"right-body"}},"author":[{"name":"Andrew Moles","affiliation":"Learning Developer, Digital Skills Lab"}],"date":"today"},"headingText":"Learning objectives:","containsRefs":false,"markdown":"\n\n- Create vectors\n- Use calculations on vectors\n- Concatenate data to make a daily weather report\n\n## Outcomes\n\nWe will write a program that tells us various metrics on what the weather is doing. Your code will automate the process of taking data and making it into a presentable format. \n\n### Make a daily weather report:\n\nYou should end up with a output that has three lines:\n\n1) Line one should have the date\n2) Line two should have lows and highs in Celsius and Fahrenheit (in brackets)\n3) Line three should have the average temperature in Celsius and Fahrenheit (in brackets)\n\n```{r}\n#| echo: false\n\ntemps <- c(20.8, 19.6, 18.7, 17.8, 17.7, 19.1, 21.4, 22.8, 24.1, 26.5, 27.8, \n           29.4, 30.7, 31.8, 32.4, 32.0, 31.8, 31.5, 31.2, 29.9, 28.3, 27.1, 26.2)\ndates <- c(\"30/06/2025 01:00:00\", \"30/06/2025 02:00:00\", \"30/06/2025 03:00:00\", \n           \"30/06/2025 04:00:00\", \"30/06/2025 05:00:00\", \"30/06/2025 06:00:00\",\n           \"30/06/2025 07:00:00\", \"30/06/2025 08:00:00\", \"30/06/2025 09:00:00\",\n           \"30/06/2025 10:00:00\", \"30/06/2025 11:00:00\", \"30/06/2025 12:00:00\",\n           \"30/06/2025 13:00:00\", \"30/06/2025 14:00:00\", \"30/06/2025 15:00:00\",\n           \"30/06/2025 16:00:00\", \"30/06/2025 17:00:00\", \"30/06/2025 18:00:00\",\n           \"30/06/2025 19:00:00\", \"30/06/2025 20:00:00\", \"30/06/2025 21:00:00\",\n           \"30/06/2025 22:00:00\", \"30/06/2025 23:00:00\")\n\ntemperature_convert <- function(temp_data, unit) {\n  if (unit == \"F\") {\n    temp_data <- (temp_data * 9/5) + 32\n  } else if (unit == \"C\") {\n    temp_data <- (temp_data - 32) * 5/9\n  } else {\n    print(\"Please provide unit you want to convert to of °C or °F\")\n  }\n  return(temp_data)\n}\n\ndmy <- substr(dates[1], 1, 10)\n\nlow <- min(temps)\nhigh <- max(temps)\navg_daily <- round(mean(temps), 2)\n\nlow_f <- min(temperature_convert(temps, unit = \"F\"))\nhigh_f <- max(temperature_convert(temps, unit = \"F\"))\navg_daily_f <- round(mean(temperature_convert(temps, unit = \"F\")), 2)\n\npaste0(\"Temperature on: \", dmy)\npaste0(\"Low: \", low, \"°C (\",low_f, \"°F) | High: \", high, \"°C (\",high_f, \"°F)\")\npaste0(\"Daily average: \", avg_daily, \"°C (\", avg_daily_f, \"°F)\")\n\n```\n\n### Optional additional output\n\nTidy the output to be one string separated by lines.\n\n```{r}\n#| echo: false\n\ncat(\n  paste0(\"Temperature on: \", dmy),\n  paste0(\"Low: \", low, \"°C (\",low_f, \"°F) | High: \", high, \"°C (\",high_f, \"°F)\"),\n  paste0(\"Daily average: \", avg_daily, \"°C (\", avg_daily_f, \"°F)\"),\n  sep = \"\\n\"\n)\n```\n\n\n### The data\n\nUsing the data below we will be making a weather reporting tool for a daily report.\n\n**Hourly temperatures:**\n\n`20.8, 19.6, 18.7, 17.8, 17.7, 19.1, 21.4, 22.8, 24.1, 26.5, 27.8, 29.4, 30.7, 31.8, 32.4, 32.0, 31.8, 31.5, 31.2, 29.9, 28.3, 27.1, 26.2`\n\n**Date and times:**\n\n`\"30/06/2025 01:00:00\", \"30/06/2025 02:00:00\", \"30/06/2025 03:00:00\", \"30/06/2025 04:00:00\", \"30/06/2025 05:00:00\", \"30/06/2025 06:00:00\",\"30/06/2025 07:00:00\", \"30/06/2025 08:00:00\", \"30/06/2025 09:00:00\", \"30/06/2025 10:00:00\", \"30/06/2025 11:00:00\", \"30/06/2025 12:00:00\",\"30/06/2025 13:00:00\", \"30/06/2025 14:00:00\", \"30/06/2025 15:00:00\", \"30/06/2025 16:00:00\", \"30/06/2025 17:00:00\", \"30/06/2025 18:00:00\",\"30/06/2025 19:00:00\", \"30/06/2025 20:00:00\", \"30/06/2025 21:00:00\", \"30/06/2025 22:00:00\", \"30/06/2025 23:00:00\"`\n\n## Steps to help you get to the outcome\n\n### Part 1 - the setup\nOpen an R script file and save it.\n\n### Part 2 - using vectors\nA vector in R is a one-dimensional array of data that is the same data type. \nUsing the data shown above, store the hourly temperatures and date and times data into R as vectors.\n\n### Part 3 - string manipulation\nExtract part of the string from the date and time data to give you just the date element. Store the result as a variable, keeping just the first element; you should get the result below. \n\n`r dmy`\n\nWe want to do this programmatically, so no copy and pasting from the data, also known as \"hardcoding\". This will help us to automate our code if we want to use different data. \n\n### Part 4 - calculate temperatures\nCalculate the lowest (minimum), highest (maximum), and average (mean) temperatures, storing the results as variables. If needed, round the results so it is more presentable. \n\n### Part 5 - convert temperatures\nConvert the lowest, highest, and average temperatures from Celsius to Fahrenheit and store the results.\n\n### Part 6 - making the text output\nPrint out the multi line string message that shows you the daily weather report with both Celsius and Fahrenheit. \n\nYou'll need a different function to what we used previously to make string messages, and you will need to add escape characters to add the new lines. \n\n### Part 7 - test your code with new data\n\nA good way to test out your code is to try it on different data. \n\nBelow we have the temperature data for a few days after the data we have been using. Using the steps you did previously, write a weather report using this new data. \n\n**Hourly temperatures:**\n\n`16.5, 15.5, 14.3, 13.7, 12.4, 12, 12.6, 14.1, 16, 18.2, 19.7, 21.1, 21.8, 22.6, 23.4, 24.3, 23.3, 23.6, 23.1, 23.4, 23.4, 21.6, 20.7, 19.5`\n\n**Date and times:**\n\n`\"03/07/2025 00:00:00\", \"03/07/2025 01:00:00\", \"03/07/2025 02:00:00\", \"03/07/2025 03:00:00\", \"03/07/2025 04:00:00\", \"03/07/2025 05:00:00\", \"03/07/2025 06:00:00\", \"03/07/2025 07:00:00\", \"03/07/2025 08:00:00\", \"03/07/2025 09:00:00\", \"03/07/2025 10:00:00\", \"03/07/2025 11:00:00\", \"03/07/2025 12:00:00\", \"03/07/2025 13:00:00\", \"03/07/2025 14:00:00\", \"03/07/2025 15:00:00\", \"03/07/2025 16:00:00\", \"03/07/2025 17:00:00\", \"03/07/2025 18:00:00\", \"03/07/2025 19:00:00\", \"03/07/2025 20:00:00\", \"03/07/2025 21:00:00\", \"03/07/2025 22:00:00\", \"03/07/2025 23:00:00\"`\n\n### Final task - fill out the survey!\n\n\nWe are always looking to improve and iterate our workshops. [Follow the link to give your feedback](https://lse.eu.qualtrics.com/jfe/form/SV_79QvS52ZX3evC4K?coursename=R Projects 2: Building a Weather Application&topic=R&prog=DS&version=25-26){target=\"_blank\"}.\n\n\n\n <!--\n### Optional extra\n\nUse functions to tidy up your code. Can you wrap up the code you have written into functions? \n\n```{r}\n#| echo: false\n#| eval: false\ntemperature_convert <- function(temp_data, unit) {\n  if (unit == \"F\") {\n    temp_data <- (temp_data * 9/5) + 32\n  } else if (unit == \"C\") {\n    temp_data <- (temp_data - 32) * 5/9\n  } else {\n    print(\"Please provide unit you want to convert to of C or F\")\n  }\n  return(temp_data)\n}\n\ndaily_report <- function(temperature, dates_times){\ndmy <- substr(dates_times[1], 1, 10)\nlow <- min(temperature)\nhigh <- max(temperature)\navg_daily <- round(mean(temperature), 2)\n\nlow_f <- min(temperature_convert(temperature, unit = \"F\"))\nhigh_f <- max(temperature_convert(temperature, unit = \"F\"))\navg_daily_f <- round(mean(temperature_convert(temperature, unit = \"F\")), 2)\n\ncat(\"Temperature on: \", dmy,\n    \" \\nLow: \", low, \"°C (\",low_f, \"°F) | High: \", high, \"°C (\",high_f, \"°F) \\nDaily average: \", \n    avg_daily, \"°C (\", avg_daily_f, \"°F)\",\n    sep = \"\")\n\n}\n\nhourly_report <- function(temperature, dates_times){\n  temps_f <- temperature_convert(temperature, \"F\")\n  print(\n    paste0(\"Hourly temperatures on: \", \n           substr(dates_times[1], 1, 10))\n    )\n  for (i in 1:length(temperature)) {\n    hour <- substr(dates_times[i], 12, 13)\n    print(\n      paste0(\"Temperature at \", hour, \": \",  temperature[i], \"°C (\", temps_f[i], \"°F)\")\n    )\n  }\n}\n```\n\n\n```{r}\n#| echo: false\n#| eval: false\ndaily_report(temps, dmy)\n```\n\n```{r}\n#| echo: false\n#| eval: false\nhourly_report(temps, dates)\n```\n\n-->\n","srcMarkdownNoYaml":"\n\n## Learning objectives:\n- Create vectors\n- Use calculations on vectors\n- Concatenate data to make a daily weather report\n\n## Outcomes\n\nWe will write a program that tells us various metrics on what the weather is doing. Your code will automate the process of taking data and making it into a presentable format. \n\n### Make a daily weather report:\n\nYou should end up with a output that has three lines:\n\n1) Line one should have the date\n2) Line two should have lows and highs in Celsius and Fahrenheit (in brackets)\n3) Line three should have the average temperature in Celsius and Fahrenheit (in brackets)\n\n```{r}\n#| echo: false\n\ntemps <- c(20.8, 19.6, 18.7, 17.8, 17.7, 19.1, 21.4, 22.8, 24.1, 26.5, 27.8, \n           29.4, 30.7, 31.8, 32.4, 32.0, 31.8, 31.5, 31.2, 29.9, 28.3, 27.1, 26.2)\ndates <- c(\"30/06/2025 01:00:00\", \"30/06/2025 02:00:00\", \"30/06/2025 03:00:00\", \n           \"30/06/2025 04:00:00\", \"30/06/2025 05:00:00\", \"30/06/2025 06:00:00\",\n           \"30/06/2025 07:00:00\", \"30/06/2025 08:00:00\", \"30/06/2025 09:00:00\",\n           \"30/06/2025 10:00:00\", \"30/06/2025 11:00:00\", \"30/06/2025 12:00:00\",\n           \"30/06/2025 13:00:00\", \"30/06/2025 14:00:00\", \"30/06/2025 15:00:00\",\n           \"30/06/2025 16:00:00\", \"30/06/2025 17:00:00\", \"30/06/2025 18:00:00\",\n           \"30/06/2025 19:00:00\", \"30/06/2025 20:00:00\", \"30/06/2025 21:00:00\",\n           \"30/06/2025 22:00:00\", \"30/06/2025 23:00:00\")\n\ntemperature_convert <- function(temp_data, unit) {\n  if (unit == \"F\") {\n    temp_data <- (temp_data * 9/5) + 32\n  } else if (unit == \"C\") {\n    temp_data <- (temp_data - 32) * 5/9\n  } else {\n    print(\"Please provide unit you want to convert to of °C or °F\")\n  }\n  return(temp_data)\n}\n\ndmy <- substr(dates[1], 1, 10)\n\nlow <- min(temps)\nhigh <- max(temps)\navg_daily <- round(mean(temps), 2)\n\nlow_f <- min(temperature_convert(temps, unit = \"F\"))\nhigh_f <- max(temperature_convert(temps, unit = \"F\"))\navg_daily_f <- round(mean(temperature_convert(temps, unit = \"F\")), 2)\n\npaste0(\"Temperature on: \", dmy)\npaste0(\"Low: \", low, \"°C (\",low_f, \"°F) | High: \", high, \"°C (\",high_f, \"°F)\")\npaste0(\"Daily average: \", avg_daily, \"°C (\", avg_daily_f, \"°F)\")\n\n```\n\n### Optional additional output\n\nTidy the output to be one string separated by lines.\n\n```{r}\n#| echo: false\n\ncat(\n  paste0(\"Temperature on: \", dmy),\n  paste0(\"Low: \", low, \"°C (\",low_f, \"°F) | High: \", high, \"°C (\",high_f, \"°F)\"),\n  paste0(\"Daily average: \", avg_daily, \"°C (\", avg_daily_f, \"°F)\"),\n  sep = \"\\n\"\n)\n```\n\n\n### The data\n\nUsing the data below we will be making a weather reporting tool for a daily report.\n\n**Hourly temperatures:**\n\n`20.8, 19.6, 18.7, 17.8, 17.7, 19.1, 21.4, 22.8, 24.1, 26.5, 27.8, 29.4, 30.7, 31.8, 32.4, 32.0, 31.8, 31.5, 31.2, 29.9, 28.3, 27.1, 26.2`\n\n**Date and times:**\n\n`\"30/06/2025 01:00:00\", \"30/06/2025 02:00:00\", \"30/06/2025 03:00:00\", \"30/06/2025 04:00:00\", \"30/06/2025 05:00:00\", \"30/06/2025 06:00:00\",\"30/06/2025 07:00:00\", \"30/06/2025 08:00:00\", \"30/06/2025 09:00:00\", \"30/06/2025 10:00:00\", \"30/06/2025 11:00:00\", \"30/06/2025 12:00:00\",\"30/06/2025 13:00:00\", \"30/06/2025 14:00:00\", \"30/06/2025 15:00:00\", \"30/06/2025 16:00:00\", \"30/06/2025 17:00:00\", \"30/06/2025 18:00:00\",\"30/06/2025 19:00:00\", \"30/06/2025 20:00:00\", \"30/06/2025 21:00:00\", \"30/06/2025 22:00:00\", \"30/06/2025 23:00:00\"`\n\n## Steps to help you get to the outcome\n\n### Part 1 - the setup\nOpen an R script file and save it.\n\n### Part 2 - using vectors\nA vector in R is a one-dimensional array of data that is the same data type. \nUsing the data shown above, store the hourly temperatures and date and times data into R as vectors.\n\n### Part 3 - string manipulation\nExtract part of the string from the date and time data to give you just the date element. Store the result as a variable, keeping just the first element; you should get the result below. \n\n`r dmy`\n\nWe want to do this programmatically, so no copy and pasting from the data, also known as \"hardcoding\". This will help us to automate our code if we want to use different data. \n\n### Part 4 - calculate temperatures\nCalculate the lowest (minimum), highest (maximum), and average (mean) temperatures, storing the results as variables. If needed, round the results so it is more presentable. \n\n### Part 5 - convert temperatures\nConvert the lowest, highest, and average temperatures from Celsius to Fahrenheit and store the results.\n\n### Part 6 - making the text output\nPrint out the multi line string message that shows you the daily weather report with both Celsius and Fahrenheit. \n\nYou'll need a different function to what we used previously to make string messages, and you will need to add escape characters to add the new lines. \n\n### Part 7 - test your code with new data\n\nA good way to test out your code is to try it on different data. \n\nBelow we have the temperature data for a few days after the data we have been using. Using the steps you did previously, write a weather report using this new data. \n\n**Hourly temperatures:**\n\n`16.5, 15.5, 14.3, 13.7, 12.4, 12, 12.6, 14.1, 16, 18.2, 19.7, 21.1, 21.8, 22.6, 23.4, 24.3, 23.3, 23.6, 23.1, 23.4, 23.4, 21.6, 20.7, 19.5`\n\n**Date and times:**\n\n`\"03/07/2025 00:00:00\", \"03/07/2025 01:00:00\", \"03/07/2025 02:00:00\", \"03/07/2025 03:00:00\", \"03/07/2025 04:00:00\", \"03/07/2025 05:00:00\", \"03/07/2025 06:00:00\", \"03/07/2025 07:00:00\", \"03/07/2025 08:00:00\", \"03/07/2025 09:00:00\", \"03/07/2025 10:00:00\", \"03/07/2025 11:00:00\", \"03/07/2025 12:00:00\", \"03/07/2025 13:00:00\", \"03/07/2025 14:00:00\", \"03/07/2025 15:00:00\", \"03/07/2025 16:00:00\", \"03/07/2025 17:00:00\", \"03/07/2025 18:00:00\", \"03/07/2025 19:00:00\", \"03/07/2025 20:00:00\", \"03/07/2025 21:00:00\", \"03/07/2025 22:00:00\", \"03/07/2025 23:00:00\"`\n\n### Final task - fill out the survey!\n\n\nWe are always looking to improve and iterate our workshops. [Follow the link to give your feedback](https://lse.eu.qualtrics.com/jfe/form/SV_79QvS52ZX3evC4K?coursename=R Projects 2: Building a Weather Application&topic=R&prog=DS&version=25-26){target=\"_blank\"}.\n\n\n\n <!--\n### Optional extra\n\nUse functions to tidy up your code. Can you wrap up the code you have written into functions? \n\n```{r}\n#| echo: false\n#| eval: false\ntemperature_convert <- function(temp_data, unit) {\n  if (unit == \"F\") {\n    temp_data <- (temp_data * 9/5) + 32\n  } else if (unit == \"C\") {\n    temp_data <- (temp_data - 32) * 5/9\n  } else {\n    print(\"Please provide unit you want to convert to of C or F\")\n  }\n  return(temp_data)\n}\n\ndaily_report <- function(temperature, dates_times){\ndmy <- substr(dates_times[1], 1, 10)\nlow <- min(temperature)\nhigh <- max(temperature)\navg_daily <- round(mean(temperature), 2)\n\nlow_f <- min(temperature_convert(temperature, unit = \"F\"))\nhigh_f <- max(temperature_convert(temperature, unit = \"F\"))\navg_daily_f <- round(mean(temperature_convert(temperature, unit = \"F\")), 2)\n\ncat(\"Temperature on: \", dmy,\n    \" \\nLow: \", low, \"°C (\",low_f, \"°F) | High: \", high, \"°C (\",high_f, \"°F) \\nDaily average: \", \n    avg_daily, \"°C (\", avg_daily_f, \"°F)\",\n    sep = \"\")\n\n}\n\nhourly_report <- function(temperature, dates_times){\n  temps_f <- temperature_convert(temperature, \"F\")\n  print(\n    paste0(\"Hourly temperatures on: \", \n           substr(dates_times[1], 1, 10))\n    )\n  for (i in 1:length(temperature)) {\n    hour <- substr(dates_times[i], 12, 13)\n    print(\n      paste0(\"Temperature at \", hour, \": \",  temperature[i], \"°C (\", temps_f[i], \"°F)\")\n    )\n  }\n}\n```\n\n\n```{r}\n#| echo: false\n#| eval: false\ndaily_report(temps, dmy)\n```\n\n```{r}\n#| echo: false\n#| eval: false\nhourly_report(temps, dates)\n```\n\n-->\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["webr"],"css":["css/styles.css"],"toc":true,"toc-depth":4,"include-in-header":["progress-bar.html"],"self-contained":true,"output-file":"Project_2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","webr":{"show-startup-message":true,"packages":["ggplot2","dplyr"]},"theme":["pulse","css/roboto.css"],"toc-location":"right-body","mainfont":"roboto","grid":{"sidebar-width":"320px"},"lightbox":"auto","title":"Project 2 - Weather application","author":[{"name":"Andrew Moles","affiliation":"Learning Developer, Digital Skills Lab"}],"date":"today"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}