{"title":"Project 5 - Visualising Olympics data","markdown":{"yaml":{"title":"Project 5 - Visualising Olympics data","format":{"html":{"self-contained":true,"toc":true,"toc-depth":4,"toc-location":"right-body"}},"author":[{"name":"Andrew Moles","affiliation":"Learning Developer, Digital Skills Lab"}],"date":"today"},"headingText":"Learning objectives:","containsRefs":false,"markdown":"\n\n- Load in data\n- Load and use packages\n- Filter data to show only information to need\n- Recode and categorise your data to be more meaningful\n- Perform an aggregation of a dataset\n- Make a bar plot using your aggregated data\n- Use factors to re-order categorical variables\n\n## Outcomes\n\nWe will write a program that provides us with summary statistics of a question we have from a dataset. Your code will automate the process of loading the data, performing operations on that data, and making it into a presentable format. \n\nWe will be looking at data on the Olympics. From this data we are asking the following question: \n\n*In all Olympic games over the years, how many medals have Great Britain won, and not won, in the Men's and Women's 800 and 1500 meters running events in athletics?*\n\nWe will be aiming for two outcomes in this project. \n\n### Outcome 1 - Make an aggregation to show your results {#sec-outcomeone}\n\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\nlibrary(readr)\nlibrary(dplyr)\n# load data\nolympics <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-08-06/olympics.csv')\n# some set up with filters and palettes\nteam_filter <- \"Great Britain\"\nmedal_palette <- c(\"#D6AF36\", \"#A7A7AD\", \"#A77044\", \"#333333\")\nselected_events <- c(\"Athletics Men's 800 metres\", \n                     \"Athletics Women's 800 metres\", \n                     \"Athletics Men's 1,500 metres\", \n                     \"Athletics Women's 1,500 metres\")\n\n# aggregation option 1 - dplyr - remove na\nrelay_sprint <- olympics |>\n  filter(team == team_filter) |>\n    filter(event %in% selected_events) |>\n  # option to remove na vals for medals\n  filter(!is.na(medal)) |>\n  # option to recode/categorise to extra value\n  #mutate(medal = ifelse(is.na(medal), \"No medal\", medal)) |>\n  mutate(medal = factor(medal, \n                        levels = c(\"Gold\", \"Silver\", \n                                   \"Bronze\"))) |>\n  group_by(medal, event) |>\n  summarise(n_indiv_medals = n())\n\nrelay_sprint_recode <- olympics |>\n  filter(team == team_filter) |>\n    filter(event %in% selected_events) |>\n  # option to remove na vals for medals\n  #filter(!is.na(medal)) |>\n  # option to recode/categorise to extra value\n  mutate(medal = ifelse(is.na(medal), \"No medal\", medal)) |>\n    mutate(medal = factor(medal, \n                        levels = c(\"Gold\", \"Silver\", \n                                   \"Bronze\", \"No medal\"))) |>\n  group_by(medal, event) |>\n  summarise(n_indiv_medals = n())\n\n\n# aggregation option 2 - data.table\n# https://atrebas.github.io/post/2020-06-17-datatable-introduction/\n# examples use chaining. Can just do this line by line\nlibrary(data.table)\nolympics_dt <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-08-06/olympics.csv')\n\n# removing na version\nrelay_dt <- olympics_dt[team == team_filter, \n                        ][!is.na(medal)\n                          ][event %in% selected_events\n                            ][, medal := factor(medal, levels = c(\"Gold\", \n                                                                 \"Silver\", \n                                                                 \"Bronze\"))\n                              ][, .(n_indiv_medals = .N), by = .(medal, event)]\n\n# recoding na version\nrelay_dt_recode <- olympics_dt[team == team_filter, \n                        ][, medal := fifelse(is.na(medal), \"No medal\", medal)\n                          ][event %in% selected_events\n                            ][, medal := factor(medal, levels = c(\"Gold\", \"Silver\", \n                                                                 \"Bronze\", \"No medal\"))\n                              ][, .(n_indiv_medals = .N), by = .(medal, event)]\n\n# result - picked one with recoding\nungroup(relay_sprint_recode)\n```\n\n\n### Outcome 2 - Make a bar plot to make your results look better {#sec-outcometwo}\n\n\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\nlibrary(ggplot2)\n\nggplot(relay_sprint_recode,\n       aes(x = medal, y = n_indiv_medals, fill = medal)) +\n  geom_col() +\n  facet_wrap(vars(event)) +\n  scale_fill_manual(\"Medal type\", values = medal_palette) +\n  labs(title = paste0(team_filter, \" middle distance (800 & 1500 metres) medals at all Olympics\"),\n       y = \"Total individual medals\", x = \"\") +\n  theme_minimal()\n```\n\n\n### The data\n\nWe will be using a csv file that is stored on GitHub - `https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-08-06/olympics.csv`. \n\nThe dataset provides individual level data on participants of the summer and winter Olympics up to and including the 2016 event. \n\n## Steps to help you get to the outcome\n\n### Part 1 - the setup\nOpen an R script file and save it.  \n\nLoad in the Olympics dataset and store it in R. \n\n### Part 2 - making a subset\nFilter your data to create a subset where by your data should include:\n\n- Only Great Britain  \n- Only the following events:\n  * Athletics Men's 800 metres\n  * Athletics Women's 800 metres\n  * Athletics Men's 1,500 metres\n  * Athletics Women's 1,500 metres\n\n### Part 3 - creating a new category\nIn our data the medals column has a lot of missing data. The missing values show that a participant did not win a medal. Instead of having missing values we want to turn those missing values into a string such as *\"no_medal\"*. \n\nUsing conditional element selection, convert the missing values in the medal column from `NA` to `no_medal`. \n\n### Part 4 - aggregation\nAggregation is the process of splitting your data, applying a function, then combining the results. \n\nGet summary statistics by group to show the number of individual medals won for each event. \n\nSave the results as a new data frame, and print the outcome. Your results should look like what we see in @sec-outcomeone. \n\n### Part 5 - making a initial visualisation\nR has packages that allow for elegant graphics for data analysis. \n\nUsing such a package make a simple bar plot using the data we just created with the aggregation. You should have medal on your x axis and individual medal count on the y axis. \n\n### Part 6 - re-ordering the x axis\nRe-order the x axis so it is in a more sensible order such as gold, silver, bronze, no medal. \n\nR will default to ordering characters alphabetically. \n\n### Part 7 - making several visuals in one plot\nWe want to split the chart window so each category of event has a separate plot. This is known as faceting. \n\n### Part 8 - final improvements on how the visualisation looks\nThere are a few more minor adjustments to make to finish up our visualisation so it looks like what we see in @sec-outcometwo. \n\n- Add colours to the bars, which has two steps: \n  * Make the fill aesthetic the same as your x axis\n  * Manually change the fill scale. The colours used in outcome 2 are: `\"#D6AF36\", \"#A7A7AD\", \"#A77044\", \"#333333\"`\n- Add a title to the visualisation\n\n### Final task - fill out the survey!\n\n\nWe are always looking to improve and iterate our workshops. [Follow the link to give your feedback](https://lse.eu.qualtrics.com/jfe/form/SV_79QvS52ZX3evC4K?coursename=R Projects 5: Visualising Olympics Data&topic=R&prog=DS&version=25-26){target=\"_blank\"}.\n\n\n","srcMarkdownNoYaml":"\n\n## Learning objectives:\n- Load in data\n- Load and use packages\n- Filter data to show only information to need\n- Recode and categorise your data to be more meaningful\n- Perform an aggregation of a dataset\n- Make a bar plot using your aggregated data\n- Use factors to re-order categorical variables\n\n## Outcomes\n\nWe will write a program that provides us with summary statistics of a question we have from a dataset. Your code will automate the process of loading the data, performing operations on that data, and making it into a presentable format. \n\nWe will be looking at data on the Olympics. From this data we are asking the following question: \n\n*In all Olympic games over the years, how many medals have Great Britain won, and not won, in the Men's and Women's 800 and 1500 meters running events in athletics?*\n\nWe will be aiming for two outcomes in this project. \n\n### Outcome 1 - Make an aggregation to show your results {#sec-outcomeone}\n\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\nlibrary(readr)\nlibrary(dplyr)\n# load data\nolympics <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-08-06/olympics.csv')\n# some set up with filters and palettes\nteam_filter <- \"Great Britain\"\nmedal_palette <- c(\"#D6AF36\", \"#A7A7AD\", \"#A77044\", \"#333333\")\nselected_events <- c(\"Athletics Men's 800 metres\", \n                     \"Athletics Women's 800 metres\", \n                     \"Athletics Men's 1,500 metres\", \n                     \"Athletics Women's 1,500 metres\")\n\n# aggregation option 1 - dplyr - remove na\nrelay_sprint <- olympics |>\n  filter(team == team_filter) |>\n    filter(event %in% selected_events) |>\n  # option to remove na vals for medals\n  filter(!is.na(medal)) |>\n  # option to recode/categorise to extra value\n  #mutate(medal = ifelse(is.na(medal), \"No medal\", medal)) |>\n  mutate(medal = factor(medal, \n                        levels = c(\"Gold\", \"Silver\", \n                                   \"Bronze\"))) |>\n  group_by(medal, event) |>\n  summarise(n_indiv_medals = n())\n\nrelay_sprint_recode <- olympics |>\n  filter(team == team_filter) |>\n    filter(event %in% selected_events) |>\n  # option to remove na vals for medals\n  #filter(!is.na(medal)) |>\n  # option to recode/categorise to extra value\n  mutate(medal = ifelse(is.na(medal), \"No medal\", medal)) |>\n    mutate(medal = factor(medal, \n                        levels = c(\"Gold\", \"Silver\", \n                                   \"Bronze\", \"No medal\"))) |>\n  group_by(medal, event) |>\n  summarise(n_indiv_medals = n())\n\n\n# aggregation option 2 - data.table\n# https://atrebas.github.io/post/2020-06-17-datatable-introduction/\n# examples use chaining. Can just do this line by line\nlibrary(data.table)\nolympics_dt <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-08-06/olympics.csv')\n\n# removing na version\nrelay_dt <- olympics_dt[team == team_filter, \n                        ][!is.na(medal)\n                          ][event %in% selected_events\n                            ][, medal := factor(medal, levels = c(\"Gold\", \n                                                                 \"Silver\", \n                                                                 \"Bronze\"))\n                              ][, .(n_indiv_medals = .N), by = .(medal, event)]\n\n# recoding na version\nrelay_dt_recode <- olympics_dt[team == team_filter, \n                        ][, medal := fifelse(is.na(medal), \"No medal\", medal)\n                          ][event %in% selected_events\n                            ][, medal := factor(medal, levels = c(\"Gold\", \"Silver\", \n                                                                 \"Bronze\", \"No medal\"))\n                              ][, .(n_indiv_medals = .N), by = .(medal, event)]\n\n# result - picked one with recoding\nungroup(relay_sprint_recode)\n```\n\n\n### Outcome 2 - Make a bar plot to make your results look better {#sec-outcometwo}\n\n\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\nlibrary(ggplot2)\n\nggplot(relay_sprint_recode,\n       aes(x = medal, y = n_indiv_medals, fill = medal)) +\n  geom_col() +\n  facet_wrap(vars(event)) +\n  scale_fill_manual(\"Medal type\", values = medal_palette) +\n  labs(title = paste0(team_filter, \" middle distance (800 & 1500 metres) medals at all Olympics\"),\n       y = \"Total individual medals\", x = \"\") +\n  theme_minimal()\n```\n\n\n### The data\n\nWe will be using a csv file that is stored on GitHub - `https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-08-06/olympics.csv`. \n\nThe dataset provides individual level data on participants of the summer and winter Olympics up to and including the 2016 event. \n\n## Steps to help you get to the outcome\n\n### Part 1 - the setup\nOpen an R script file and save it.  \n\nLoad in the Olympics dataset and store it in R. \n\n### Part 2 - making a subset\nFilter your data to create a subset where by your data should include:\n\n- Only Great Britain  \n- Only the following events:\n  * Athletics Men's 800 metres\n  * Athletics Women's 800 metres\n  * Athletics Men's 1,500 metres\n  * Athletics Women's 1,500 metres\n\n### Part 3 - creating a new category\nIn our data the medals column has a lot of missing data. The missing values show that a participant did not win a medal. Instead of having missing values we want to turn those missing values into a string such as *\"no_medal\"*. \n\nUsing conditional element selection, convert the missing values in the medal column from `NA` to `no_medal`. \n\n### Part 4 - aggregation\nAggregation is the process of splitting your data, applying a function, then combining the results. \n\nGet summary statistics by group to show the number of individual medals won for each event. \n\nSave the results as a new data frame, and print the outcome. Your results should look like what we see in @sec-outcomeone. \n\n### Part 5 - making a initial visualisation\nR has packages that allow for elegant graphics for data analysis. \n\nUsing such a package make a simple bar plot using the data we just created with the aggregation. You should have medal on your x axis and individual medal count on the y axis. \n\n### Part 6 - re-ordering the x axis\nRe-order the x axis so it is in a more sensible order such as gold, silver, bronze, no medal. \n\nR will default to ordering characters alphabetically. \n\n### Part 7 - making several visuals in one plot\nWe want to split the chart window so each category of event has a separate plot. This is known as faceting. \n\n### Part 8 - final improvements on how the visualisation looks\nThere are a few more minor adjustments to make to finish up our visualisation so it looks like what we see in @sec-outcometwo. \n\n- Add colours to the bars, which has two steps: \n  * Make the fill aesthetic the same as your x axis\n  * Manually change the fill scale. The colours used in outcome 2 are: `\"#D6AF36\", \"#A7A7AD\", \"#A77044\", \"#333333\"`\n- Add a title to the visualisation\n\n### Final task - fill out the survey!\n\n\nWe are always looking to improve and iterate our workshops. [Follow the link to give your feedback](https://lse.eu.qualtrics.com/jfe/form/SV_79QvS52ZX3evC4K?coursename=R Projects 5: Visualising Olympics Data&topic=R&prog=DS&version=25-26){target=\"_blank\"}.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["webr"],"css":["css/styles.css"],"toc":true,"toc-depth":4,"include-in-header":["progress-bar.html"],"self-contained":true,"output-file":"Project_5.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","webr":{"show-startup-message":true,"packages":["ggplot2","dplyr"]},"theme":{"light":["spacelab","css/roboto.css"],"dark":["darkly","css/roboto.css"]},"toc-location":"right-body","mainfont":"roboto","grid":{"sidebar-width":"320px"},"lightbox":"auto","title":"Project 5 - Visualising Olympics data","author":[{"name":"Andrew Moles","affiliation":"Learning Developer, Digital Skills Lab"}],"date":"today"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}